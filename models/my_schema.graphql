enum Genre {
    YA
    ADULT
    MIDDLE_SCHOOL
    FICTION
    NONFICTION
    ROMANCE
    THRILLER
    HORROR
    COMING_OF_AGE
    NOVEL
    MEMOIR
}
# Shape: Book
# Keys: fields
# scalars: values
type Library @createModel(accountRelation: LIST, description: "A physical place holding books") {
  bookkeeper: String! @string(maxLength: 50)
  name: String! @string(maxLength: 50)
  address: String @string(maxLength: 80)
  books: [BookInfo!]! @list(minLength: 1, maxLength: 5000)
  openingDate: Date
  openLoans: [LibraryLoan!]! @list(minLength: 0, maxLength: 5000)
}

type BookInfo {
  numPages: Int
  author: String! @string(minLength: 3, maxLength: 50)
  title: String! @string(minLength: 3, maxLength: 50)
  synapsis: String @string(minLength: 3, maxLength: 150)
  banned: Boolean
  genre: [Genre] @list(minLength: 1, maxLength: 10)
  publishDate: Date
}

type LibraryLoan {
  recipient: DID! @accountReference #@accountReference will link this value to the tx author/ Model to account relations enable you to link data to and query data from an account other than the dataâ€™s author.
  book: BookInfo!
  loanDate: Date
}


#type Comment @loadModel(id: "kjzl6hvfrbw6c9oo2ync09y6z5c9mas9u49lfzcowepuzxmcn3pzztvzd0c7gh0") {
#  id: ID!
#}
#
## Load post model (using streamID)
#type Post @loadModel(id: "kjzl6hvfrbw6c99mdfpjx1z3fue7sesgua6gsl1vu97229lq56344zu9bawnf96"){
#    id: ID!
#    comments: [Comment] @relationFrom(model: "Comment", property: "postID")
#}
#
## New comment model
## Set relationship to original post
## Enable querying comment to get original post
#
#type Comment @createModel(accountRelation: LIST, description: "A comment on a Post") {
#  postID: StreamID! @documentReference(model: "Post")
#  post: Post! @relationDocument(property: "postID")
#  text: String! @string(maxLength: 500)
#}